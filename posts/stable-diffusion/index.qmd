---
title: 'Stable Diffusion for dummies'
description: 'A little informal guide to diffusion first timers.'
author: 'Harsh Sharma'
date: '10/29/2023'
image: logo.png
categories:
  - Notes
  - Fastai Part2
format: 
    html: 
        code-fold: true
jupyter: python3
---

```{python}
#| label: timesteps
#| fig-cap: "An example of a noise-schedule wrt timesteps function"

import matplotlib.pyplot as plt
import numpy as np

# Generate random data for time steps and corresponding noise levels
time_steps = np.arange(0, 1000, 1)  # Assuming 100 time steps
noise_levels =[-(x)**2 + 30*x + 2 for x in range(1,1001)] # Random noise levels between 0 and 1

# Plotting the time-step noise schedule graph
plt.figure(figsize=(10, 6))
plt.plot(time_steps, noise_levels, color='b', label='Noise Levels')
plt.xlabel('Time Steps')
plt.ylabel('Noise Level')
plt.legend()
plt.show()
```

# Stable Diffusion for dummies

Most people reading this have probably heard of image generation through AI at some point in time. If you're among those who haven't, then this journey will be even better as I go in some fair detail to explain what it is.

If at any point, the things I talk about seem hard, don't be discouraged as it's more of a shock if you find this easy to read. Nevertheless, buckle up because although we might not go all the way into the deep-end (I don't know enough stuff yet for that), I think we'll still get to dip our toes.

![](buckleup.gif)

## Cool pics to pump you up:

\

I'll just let the images speak.  

\

![cozy warm image of an indian male programmer sitting near a beautiful pond, scenic, matches white background, beautiful](img3.jpg)

\

![Dune arakis in the background. Paul Atreides giving speech. Crowd listening is charged, ominous foreboding theme.](img4.jpg)

\

![nspiring landscape poster showing humanity as a multiplanetary species, sprawling metropolis with large structures, awe-inspiring, 1920x1080 image, outer space](img5.jpg)

\

All of the above were generated with simple but detailed text prompts.
\
Probability of Noise:

$$\nabla_X P(X)$$

```{mermaid}
flowchart LR
  I1(img1) --> F((Magic Function))
  I2(img2) --> F
  I3(img3) --> F
  F --> O1("P(img1)")
  F --> O2("P(img2)")
  F --> O3("P(img3)")

```

\

```{mermaid}
flowchart LR
    B["Randomly selected sequential noise"] -->  X((+))
    X --> A["Somewhat noisy latent"] --> C(("Diffusion Model"))
    C --> D("Predicted Noise") --> - --> A
    A --> E["Less noisy latent"]
    F["Randomly Selected Noise"] --> Z((+)) --> E -->
    G(("Updated Diffusion Model")) --> H("Predicted Noise")
    H --> Y[-] --> E
```

\

| Model             | Input                  | Output      | Notes              |
| ----------------- | ---------------------- | ----------- | ------------------ |
| Unet              | somewhat noisy latents | the noise   | -                  |
| VAE Decoder       | small latents tensor   | large image | guided by captions |
| CLIP text encoder | text                   | embedding   | -                  |
